
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ymwbfotugdtmsoqbxsds.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inltd2Jmb3R1Z2R0bXNvcWJ4c2RzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4MTk4MTUsImV4cCI6MjA2MzM5NTgxNX0.X_cM1p6WLOGgSp4RddJLdsELZONd9Hn5qUl9YiVSv34";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      // We'll use custom auth handling for Privy integration
    }
  }
});

// Function to set custom JWT from Privy into Supabase
// Note: Since we don't have direct Privy JWT support in Supabase,
// we'll use a custom solution using service role access for new users
export const setSupabaseAuth = async (privyUserId: string) => {
  console.log("Setting up custom Supabase access for Privy user:", privyUserId);
  try {
    // For now, we'll use direct access for new user creation
    // In production, you would use a serverless function with service_role key
    // to properly link Privy and Supabase auth
    
    // This is a temporary solution until proper JWT exchange is implemented
    return true;
  } catch (error) {
    console.error("Failed to set custom auth:", error);
    return false;
  }
};
