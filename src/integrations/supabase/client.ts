
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ymwbfotugdtmsoqbxsds.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inltd2Jmb3R1Z2R0bXNvcWJ4c2RzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4MTk4MTUsImV4cCI6MjA2MzM5NTgxNX0.X_cM1p6WLOGgSp4RddJLdsELZONd9Hn5qUl9YiVSv34";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      // We'll use custom auth handling for Privy integration
    }
  }
});

// Function to set custom JWT from Privy into Supabase
// When using Privy, we need to bypass RLS with service role or update policies
export const setSupabaseAuth = async (privyUserId: string) => {
  console.log("Setting up custom Supabase access for Privy user:", privyUserId);
  
  // Since we can't properly exchange JWTs between Privy and Supabase in the client,
  // we need a different approach to authorize the user
  
  // Option 1: Modify the RLS policy to allow inserts for new users (implemented in this PR)
  // This involves changing the RLS policy to use OR logic for new user registration
  
  // Option 2 (future enhancement): Use a serverless function with admin rights
  // to create the user profile with proper authentication
  
  try {
    // Let's modify the Supabase auth headers to include the Privy user ID
    // This won't actually authenticate with Supabase but helps with debugging
    supabase.functions.setAuth(privyUserId);
    
    // A service_role key would be used in production, but that's not available in client-side code
    // Instead, we'll rely on a modified RLS policy for now
    
    console.log("Custom auth setup completed for user:", privyUserId);
    return true;
  } catch (error) {
    console.error("Failed to set custom auth:", error);
    return false;
  }
};

// Helper function to clean up any auth state
export const clearAuthState = () => {
  // Clear any auth-related items from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
};
