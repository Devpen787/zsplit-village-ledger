
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ymwbfotugdtmsoqbxsds.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inltd2Jmb3R1Z2R0bXNvcWJ4c2RzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4MTk4MTUsImV4cCI6MjA2MzM5NTgxNX0.X_cM1p6WLOGgSp4RddJLdsELZONd9Hn5qUl9YiVSv34";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'X-Client-Info': 'privy-auth'
    }
  }
});

// Function to create a temporary session for RLS context
export const setSupabaseAuth = async (privyUserId: string) => {
  console.log("[Auth] Setting Supabase auth context for user:", privyUserId);
  
  try {
    // Create a minimal session object that RLS can use
    // This doesn't give full Supabase auth capabilities but provides the user context for RLS
    const mockSession = {
      access_token: `privy-${privyUserId}`,
      refresh_token: `privy-refresh-${privyUserId}`,
      expires_in: 3600,
      token_type: 'bearer',
      user: {
        id: privyUserId,
        aud: 'authenticated',
        role: 'authenticated',
        email: '',
        app_metadata: {},
        user_metadata: {},
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }
    };

    // Set the session manually for RLS context
    await supabase.auth.setSession({
      access_token: mockSession.access_token,
      refresh_token: mockSession.refresh_token
    });
    
    console.log("Supabase auth context set successfully for user:", privyUserId);
    return true;
  } catch (error) {
    console.error("Failed to set Supabase auth context:", error);
    return false;
  }
};

// Helper function to clean up any auth state
export const clearAuthState = () => {
  console.log("[Auth] Clearing auth state...");
  
  // Clear any auth-related items from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Try to reset the auth session
  try {
    supabase.auth.signOut();
  } catch (error) {
    console.warn("Non-critical: Error during signout cleanup:", error);
  }
};

// Service for creating users securely via Edge Function
export const createUserSecurely = async (userData: {
  user_id: string;
  user_email: string;
  user_name?: string;
  user_role?: string;
}) => {
  try {
    console.log('Calling create-user function with data:', userData);
    
    const { data, error } = await supabase.functions.invoke('create-user', {
      body: userData
    });

    if (error) {
      console.error('Error calling create-user function:', error);
      throw new Error(`Failed to create user: ${error.message}`);
    }

    console.log('Create-user function response:', data);
    return data.data;
  } catch (error) {
    console.error('Error in createUserSecurely:', error);
    throw error;
  }
};

// Service for creating groups securely via Edge Function
export const createGroupSecurely = async (groupData: {
  name: string;
  icon: string;
  created_by: string;
}) => {
  try {
    console.log('Calling create-group function with data:', groupData);
    
    const { data, error } = await supabase.functions.invoke('create-group', {
      body: groupData
    });

    if (error) {
      console.error('Error calling create-group function:', error);
      throw new Error(`Failed to create group: ${error.message}`);
    }

    console.log('Create-group function response:', data);
    return data.data;
  } catch (error) {
    console.error('Error in createGroupSecurely:', error);
    throw error;
  }
};

// Helper function to make authenticated requests with Privy user context
export const makeAuthenticatedRequest = async (privyUserId: string, requestFn: () => Promise<any>) => {
  try {
    // Ensure auth context is set before making the request
    await setSupabaseAuth(privyUserId);
    
    // Execute the request function
    const response = await requestFn();
    
    return response;
  } catch (error) {
    console.error('Error making authenticated request:', error);
    throw error;
  }
};
