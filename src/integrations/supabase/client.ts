
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ymwbfotugdtmsoqbxsds.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inltd2Jmb3R1Z2R0bXNvcWJ4c2RzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4MTk4MTUsImV4cCI6MjA2MzM5NTgxNX0.X_cM1p6WLOGgSp4RddJLdsELZONd9Hn5qUl9YiVSv34";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      // We'll use custom auth handling for Privy integration
    }
  }
});

// Function to set custom JWT from Privy into Supabase
export const setSupabaseAuth = async (privyUserId: string) => {
  console.log("Setting up custom Supabase access for Privy user:", privyUserId);
  
  try {
    // IMPORTANT: For Privy integration with RLS policies
    // We need to bypass the auth.uid() check by allowing anonymous access temporarily
    // while still ensuring data integrity by checking the user ID in the application
    
    // Option A: Set a custom header to indicate this is a Privy user
    supabase.functions.setAuth(privyUserId);
    
    // Option B: Set global headers for all requests
    const { data, error } = await supabase.auth.setSession({
      access_token: privyUserId, // Not a real JWT, but used as identifier
      refresh_token: '',
    });
    
    if (error) {
      console.warn("Non-critical: Could not set custom session:", error);
      // Continue anyway as we're using the functions.setAuth as backup
    } else {
      console.log("Custom session initialized", data);
    }
    
    // Update Supabase client configuration to include Privy user ID in headers
    supabase.supabaseUrl = SUPABASE_URL;
    supabase.supabaseKey = SUPABASE_PUBLISHABLE_KEY;

    // For debugging - let's check if we can retrieve the session
    const { data: sessionData } = await supabase.auth.getSession();
    console.log("Current session after setup:", sessionData);
    
    console.log("Custom auth setup completed for user:", privyUserId);
    return true;
  } catch (error) {
    console.error("Failed to set custom auth:", error);
    return false;
  }
};

// Helper function to clean up any auth state
export const clearAuthState = () => {
  // Clear any auth-related items from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Clear any custom auth state
  supabase.functions.setAuth('');
  
  // Try to reset the auth session
  try {
    supabase.auth.signOut();
  } catch (error) {
    console.warn("Non-critical: Error during signout cleanup:", error);
  }
};
